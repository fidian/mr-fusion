#!/usr/bin/env bash
set -e

build-merge-list() {
    local BRANCH PARENT_VAR PREVIOUS_COUJNT STILL_UNHANDLED UNHANDLED

    echo "Determining merge order"
    PREVIOUS_COUNT=""
    UNHANDLED=("${GIT_BRANCHES[@]}")
    MERGE_LIST=()

    while [[ "${#UNHANDLED[@]}" != "$PREVIOUS_COUNT" ]]; do
        PREVIOUS_COUNT="${#UNHANDLED[@]}"
        STILL_UNHANDLED=()

        for BRANCH in "${UNHANDLED[@]}"; do
            if [[ "$BRANCH" != "$MR_FUSION_BRANCH" ]]; then
                PARENT_VAR="BRANCHES__${BRANCH}__parent"

                if [[ -z "${!PARENT_VAR}" ]] || in-array "${!PARENT_VAR}" "${MERGE_LIST[@]}"; then
                    MERGE_LIST=("${MERGE_LIST[@]}" "$BRANCH")
                else
                    STILL_UNHANDLED=("${STILL_UNHANDLED[@]}" "$BRANCH")
                fi
            fi
        done

        UNHANDLED=("${STILL_UNHANDLED[@]}")
    done

    if [[ "${#UNHANDLED}" -gt 0 ]]; then
        echo "ERROR: Unable to find parents or handle circular dependency."
        echo "ERROR: Unresolved branches: ${UNHANDLED[@]}"
        exit 1
    fi

    echo "Merge order determined:"
    show-list "${MERGE_LIST[@]}"
}

cleanup() {
    echo "Cleaning up"

    if [[ ! -z "$WORK_DIR" ]] && [[ -d "$WORK_DIR" ]]; then
        rm -rf "$WORK_DIR"
    fi
}

clone-repository() {
    local CLONE_PATH

    echo "Creating temporary directory"
    CLONE_PATH=$1
    WORK_DIR=$(mktemp -d || true)

    if [[ -z "$WORK_DIR" ]] || [[ ! -d "$WORK_DIR" ]]; then
        echo "ERROR: Unable to create temporary directory" >&2

        exit 1
    fi

    echo "Cloning the repository"
    git clone "$CLONE_PATH" "$WORK_DIR"
    hook-run-or-exit clone-repository
}

configure-git() {
    echo "Configuring git"
    (
        cd "$WORK_DIR"
        git config push.default simple
    )
    hook-run-or-exit git-config
}

help-message() {
    cat <<EOF
Mr. Fusion

Merge parent branches into child branches for a repository.
See $MR_FUSION_URL for more information.

Usage:
    $MR_FUSION [OPTIONS] REPOSITORY_URL

Options:
    -c FILE    Load a config file with settings.
    -h         This help message.
    -n         Dry run - display everything but don't push merges to origin.
EOF
}

helpful-termination() {
    echo ""
    echo "Use '$MR_FUSION -h' for help or check out the website."
    echo "$MR_FUSION_URL"

    exit 1
}

hook-add() {
    local COMMAND VAR

    if [[ $# -lt 2 ]]; then
        echo "Must specify hook name and command" >&2

        exit 1
    fi

    VAR="HOOK_$1"
    VAR=${VAR//-/_}
    shift
    printf -v COMMAND "%q " "$@"
    eval "${VAR}=(\"\${${VAR}[@]}\" \"\${COMMAND:1}\")"
}

hook-run() {
    local COMMAND LIST VAR

    VAR="HOOK_$1"
    VAR=${VAR//-/_}
    eval "LIST=(\"\${${VAR}[@]}\")"

    if [[ ${#LIST} -eq 0 ]]; then
        echo "No commands defined for hook: $1"
        return 0
    fi

    for COMMAND in "${LIST[@]}"; do
        eval "$COMMAND" || return 1
    done

    return 0
}

hook-run-or-exit() {
    local OLD_PWD

    OLD_PWD=$(pwd)
    cd "$WORK_DIR"

    if ! hook-run $1; then
        echo "ERROR: Problem detected during $1 hook"
        echo "ERROR: Aborting"
        exit 1
    fi

    cd "$OLD_PWD"
}

in-array() {
    local CHECK NEEDLE

    NEEDLE="$1"
    shift

    for CHECK in "$@"; do
        [[ "$NEEDLE" == "$CHECK" ]] && return 0
    done

    return 1
}

initialize-repository() {
    local BRANCH VAR

    if in-array "$MR_FUSION_BRANCH" "${GIT_BRANCHES[@]}"; then
        echo "ERROR: Repository already has a '$MR_FUSION_BRANCH' branch"
        exit 1
    fi

    echo "Initializing repository for Mr. Fusion"
    (
        cd "$WORK_DIR"
        git checkout --orphan "$MR_FUSION_BRANCH"
        git rm -rf .

        # config
        for VAR in GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL; do
            echo "${VAR}=\"${!VAR}\"" >> config
        done

        git add config

        # branches.ini
        for BRANCH in "${GIT_BRANCHES[@]}"; do
            if [[ "$BRANCH" != "$MR_FUSION_BRANCH" ]]; then
                echo "[$BRANCH]" >> branches.ini
                echo "parent=" >> branches.ini
                echo "" >> branches.ini
            fi
        done

        git add branches.ini

        # plugins
        mkdir plugins
        touch plugins/.keep
        git add plugins/.keep

        git commit -m 'Initial commit'

        if $DRY_RUN; then
            echo "Not pushing upstream - this is a dry run"
            exit 0
        fi

        git push origin "$MR_FUSION_BRANCH"
    )
}

load-config() {
    switch-to-branch "$MR_FUSION_BRANCH"

    if [[ -f "$WORK_DIR/config" ]]; then
        echo "Loading config file from repository"
        . "$WORK_DIR/config" "$WORK_DIR"
    fi

    if [[ -f "$WORK_DIR/branches.ini" ]]; then
        echo "Parsing branches.ini"
        parse-ini "BRANCHES" "$(cat "$WORK_DIR/branches.ini")"
    fi

    echo "Branches that are configured:"
    show-list "${BRANCHES[@]}"
    hook-run-or-exit "load-config"
}

load-git-branches() {
    local OLD_IFS

    echo "Finding git branches"
    OLD_IFS=$IFS
    IFS="\n"
    GIT_BRANCHES=()

    while read LINE; do
        LINE="$(trim "$LINE")"
        LINE="${LINE//origin\/}"

        if [[ ! -z "$LINE" ]]; then
            GIT_BRANCHES=("${GIT_BRANCHES[@]}" "$LINE")
        fi
    done <<< "$(
        cd "$WORK_DIR"
        git branch -r | grep -v ' -> '
    )"
    IFS=$OLD_IFS
    echo "Branches found:"
    show-list "${GIT_BRANCHES[@]}"
    hook-run-or-exit "git-branches"
}

merge-branches() {
    local BRANCH PARENT_VAR

    MERGES_FAIL=()
    MERGES_GOOD=()

    hook-run-or-exit merge-start

    for BRANCH in "${MERGE_LIST[@]}"; do
        PARENT_VAR="BRANCHES__${BRANCH}__parent"

        if [[ -z "${!PARENT_VAR}" ]]; then
            echo "Not merging $BRANCH - it has no parent"
        else
            if ! merge-two-branches "${!PARENT_VAR}" "$BRANCH"; then
                echo "ERROR: Merge failed"
                MERGES_FAIL=("${MERGES_FAIL[@]}" "$BRANCH")
                hook-run-or-exit merge-fail
            else
                echo "Merge successful"
                MERGES_GOOD=("${MERGES_GOOD[@]}" "$BRANCH")
                hook-run-or-exit merge-good
            fi

            if ! (
                cd "$WORK_DIR"
                git reset --hard "origin/$BRANCH"
            ); then
                echo "ERROR: Can not reset repository - can not continue"
                exit 1
            fi
        fi
    done

    hook-run-or-exit merge-finish
}

merge-two-branches() {
    (
        cd "$WORK_DIR"

        switch-to-branch "$BRANCH" || exit 1
        hook-run-or-exit merge-before

        echo "Merging ${!PARENT_VAR} into $BRANCH"

        if ! git merge "origin/${!PARENT_VAR}"; then
            echo "ERROR: Unable to merge ${!PARENT_VAR} into $BRANCH"
            exit 1
        fi

        hook-run-or-exit merge-validate

        if $DRY_RUN; then
            echo "Not pushing upstream - this is a dry run"
            exit 0
        fi

        git push
    ) || return 1
}

parse-ini() {
    local KEY OLD_IFS PREFIX SECTION VALUE

    OLD_IFS=$IFS
    IFS="\n"
    SECTION=""
    PREFIX="$1"

    eval "${PREFIX}=()"

    while read LINE; do
        LINE=$(trim "$LINE")

        # Eliminate comments
        LINE=${LINE##\#*}
        LINE=${LINE##;*}

        if [[ "${LINE:0:1}" == '[' ]] && [[ "${LINE:${#LINE}-1}" == "]" ]]; then
            LINE=${LINE:1:${#LINE}-2}
            SECTION=$(trim "$LINE")
            eval "${PREFIX}__${SECTION}=true"
            eval "${PREFIX}=(\"\${${PREFIX}[@]}\" \"\$SECTION\")"
        else
            IFS="="
            read KEY VALUE <<< "$LINE"
            IFS="\n"
            KEY=$(trim "$KEY")

            if [[ ! -z "$KEY" ]]; then
                VALUE=$(trim "$VALUE")
                eval "${PREFIX}__${SECTION}__${KEY}=\$VALUE"
            fi
        fi
    done <<< "$2"

    IFS=$OLD_IFS
}

show-list() {
    while [[ "$#" -gt 0 ]]; do
        echo "  * $1"
        shift
    done
}

show-results() {
    if [[ "${#MERGES_FAIL[@]}" -gt 0 ]]; then
        echo "Failed merges detected"
        show-list "${MERGES_FAIL[@]}"

        exit 1
    fi
}

switch-to-branch() {
    echo "Switching to branch $1"
    if ! (
        cd "$WORK_DIR"
        git checkout "$1"
    ); then
        echo "ERROR: Unable to check out branch $1" >&2

        exit 1
    fi
    hook-run-or-exit switch-branch
}

trim() {
    local OLD STR

    STR=$1
    OLD=""

    while [[ "$STR" != "$OLD" ]]; do
        OLD=$STR
        STR=${STR# }
        STR=${STR#$'\n'}
        STR=${STR#$'\r'}
        STR=${STR#$'\t'}
        STR=${STR% }
        STR=${STR%$'\n'}
        STR=${STR%$'\r'}
        STR=${STR%$'\t'}
    done

    echo "$STR"
}

BRANCHES=()
DO_INITIALIZE=false
DRY_RUN=false
GIT_AUTHOR_NAME="Mr. Fusion"
GIT_AUTHOR_EMAIL="mr.fusion@example.com"
GIT_BRANCHES=()
GIT_COMMITTER_NAME="Mr. Fusion"
GIT_COMMITTER_EMAIL="mr.fusion@example.com"
MERGE_LIST=()
MERGES_FAIL=()
MERGES_GOOD=()
MR_FUSION=${0##*/}
MR_FUSION_BRANCH=${MR_FUSION_BRANCH:-mr-fusion}
MR_FUSION_DIR=${0%%/*}
MR_FUSION_URL="https://github.com/tests-always-included/mr-fusion"
VALIDATION_FUNCTIONS=()
WORK_DIR=

while getopts ":c:hin:" ARG; do
    case "$ARG" in
        c)
            . "$OPTARG"
            ;;

        h)
            help-message

            exit 0
            ;;

        i)
            echo "Enabling initialization"
            DO_INITIALIZE=true
            ;;

        n)
            echo "Enabling DRY_RUN"
            DRY_RUN=true
            ;;

        :)
            echo "Option -$OPTARG requires a value."
            helpful-termination
            ;;

        '?')
            echo "Invalid option (-$OPTARG)."
            helpful-termination
            ;;
    esac
done

shift $((OPTIND-1))

if [[ -z "$1" ]]; then
    echo "No repository specified."
    helpful-termination
fi

trap cleanup SIGINT SIGTERM EXIT
clone-repository "$1"

if $DO_INITIALIZE; then
    load-git-branches
    initialize-repository
    exit
fi

load-config
configure-git
load-git-branches
build-merge-list
merge-branches
show-results
