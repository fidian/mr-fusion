#!/usr/bin/env bash
set -e

# Build a list of branches to merge
#
# Scans the parents defined in the branches.ini file and the branches
# provided in git.  Adds branches to a list if the branch has no parent or
# if the parent is already in the list.  Loops until all branches are added.
#
# Exits if there is a circular dependency.
#
# Sets the ordered branches to MERGE_LIST.
#
# Gets branch names from GIT_BRANCHES and the rules from the INI file
build-merge-list() {
    local BRANCH PARENT_VAR PREVIOUS_COUJNT STILL_UNHANDLED UNHANDLED

    echo "Determining merge order"
    PREVIOUS_COUNT=""
    UNHANDLED=("${GIT_BRANCHES[@]}")
    MERGE_LIST=()

    while [[ "${#UNHANDLED[@]}" != "$PREVIOUS_COUNT" ]]; do
        PREVIOUS_COUNT="${#UNHANDLED[@]}"
        STILL_UNHANDLED=()

        for BRANCH in "${UNHANDLED[@]}"; do
            if [[ "$BRANCH" != "$MR_FUSION_BRANCH" ]]; then
                PARENT_VAR=$(ini-var "$BRANCH" parent)

                if [[ -z "${!PARENT_VAR}" ]] || in-array "${!PARENT_VAR}" "${MERGE_LIST[@]}"; then
                    MERGE_LIST=("${MERGE_LIST[@]}" "$BRANCH")
                else
                    STILL_UNHANDLED=("${STILL_UNHANDLED[@]}" "$BRANCH")
                fi
            fi
        done

        UNHANDLED=("${STILL_UNHANDLED[@]}")
    done

    if [[ "${#UNHANDLED}" -gt 0 ]]; then
        echo "ERROR: Unable to find parents or handle circular dependency."
        echo "ERROR: Unresolved branches: ${UNHANDLED[@]}"
        exit 1
    fi

    echo "Merge order determined:"
    show-list "${MERGE_LIST[@]}"
}


# Removes the temporary directory where the repository was stored during the
# execution of Mr. Fusion.
#
# This is automatically ran through a trap.
cleanup() {
    echo "Cleaning up"

    if [[ ! -z "$WORK_DIR" ]] && [[ -d "$WORK_DIR" ]]; then
        rm -rf "$WORK_DIR"
    fi
}


# Creates a temporary directory and clones the desired repository into the
# temporary directory.
#
# Runs the hook clone-repository.
clone-repository() {
    local CLONE_PATH

    echo "Creating temporary directory"
    CLONE_PATH=$1
    WORK_DIR=$(mktemp -d || true)

    if [[ -z "$WORK_DIR" ]] || [[ ! -d "$WORK_DIR" ]]; then
        echo "ERROR: Unable to create temporary directory" >&2

        exit 1
    fi

    echo "Cloning the repository from $CLONE_PATH"
    git clone "$CLONE_PATH" "$WORK_DIR"
    hook-run-or-exit clone-repository
}


# Sets git configuration settings to ensure good merges.
#
# Runs the hook git-config.
configure-git() {
    echo "Configuring git"
    (
        cd "$WORK_DIR"
        git config push.default simple
    )
    hook-run-or-exit git-config
}


# Displays a useful help message.
help-message() {
    cat <<EOF
Mr. Fusion

Merge parent branches into child branches for a repository.
See $MR_FUSION_URL for more information.

Usage:
    $MR_FUSION [OPTIONS] REPOSITORY_URL

Options:
    -h         This help message.
    -i         Install a configuration branch and skeleton files into your
               repository.
    -n         Dry run - display everything but don't push merges to origin.
    -p FILE    Download and install a plugin from the Mr. Fusion repository
               into yours.
EOF
}


# Hex encodes a string and writes it to stdout.
#
# Parameters:
#     $1: The string to encode.
encode-string() {
    local C OUT

    IN="$1"
    OUT=""

    while [[ "${#IN}" -gt 0 ]]; do
        C=${IN:0:1}
        printf -v C "%x" "'$C"
        OUT="$OUT$C"
        IN="${IN:1}"
    done

    echo "$OUT"
}


# Show a nice message after an error and exit the program.
helpful-termination() {
    echo ""
    echo "Use '$MR_FUSION -h' for help or check out the website."
    echo "$MR_FUSION_URL"

    exit 1
}


# Add a command to be called for a given hook.
#
# Exits with an error if there are not enough arguments passed.
#
# Parameters:
#     $1: Hook name.
#     $2-$*: The command and optional arguments.
hook-add() {
    local COMMAND VAR

    if [[ $# -lt 2 ]]; then
        echo "Must specify hook name and command" >&2

        exit 1
    fi

    VAR="HOOK_$(encode-string "$1")"
    shift
    printf -v COMMAND "%q " "$@"
    eval "${VAR}=(\"\${${VAR}[@]}\" \"\${COMMAND:1}\")"
}


# Run all of the commands for a given hook.
#
# Returns an error if any hook returned an error.
#
# Parameters:
#     $1: Hook name to run.
hook-run() {
    local COMMAND LIST VAR

    VAR="HOOK_$(encode-string "$1")"
    eval "LIST=(\"\${${VAR}[@]}\")"

    if [[ ${#LIST} -eq 0 ]]; then
        return 0
    fi

    for COMMAND in "${LIST[@]}"; do
        eval "$COMMAND" || return 1
    done

    return 0
}


# Run a hook from within the repository.  If anything returned an error then
# exit the program.  Otherwise, restore the current directory.
#
# Parameters:
#     $1: Hook name to run.
hook-run-or-exit() {
    local OLD_PWD

    OLD_PWD=$(pwd)
    cd "$WORK_DIR"

    if ! hook-run $1; then
        echo "ERROR: Problem detected during $1 hook"
        echo "ERROR: Aborting"
        exit 1
    fi

    cd "$OLD_PWD"
}


# Check if a value is in a list of values.  Useful for determining if a value
# is in an array.
#
# Example:
#
#    FARM_ANIMALS=(horse cow pig sheep)
#    ANIMAL="elephant"
#
#    if ! in-array "$ANIMAL" "${FARM_ANIMALS[@]}"; then
#        echo "$ANIMAL is not a farm animal"
#    fi
#
# Parameters:
#     $1: The value to seek (the needle).
#     $2-$*: The array of values to search within (the haystack).
#
# Returns true (0) if the value is in the array, false (1) if not.
in-array() {
    local CHECK NEEDLE

    NEEDLE="$1"
    shift

    for CHECK in "$@"; do
        [[ "$NEEDLE" == "$CHECK" ]] && return 0
    done

    return 1
}


# Construct an environment variable to look up information from the
# parsed branches.ini file.
#
# The variable name is written to stdout.
#
# Parameters:
#     $1: Section name.
#     $2: Key (optional).
ini-var() {
    local VAR

    VAR="INI_BRANCHES__$(encode-string "$1")"

    if [[ ! -z "$2" ]]; then
        VAR="${VAR}__$(encode-string "$2")"
    fi

    echo "$VAR"
}


# Helpful function to take a repository and initialize it with a mr-fusion
# branch and a skeleton configuration.
initialize-repository() {
    local BRANCH VAR

    if in-array "$MR_FUSION_BRANCH" "${GIT_BRANCHES[@]}"; then
        echo "ERROR: Repository already has a '$MR_FUSION_BRANCH' branch"
        exit 1
    fi

    echo "Initializing repository for Mr. Fusion"
    (
        cd "$WORK_DIR"
        git checkout --orphan "$MR_FUSION_BRANCH"
        git rm -rf .

        # config
        for VAR in GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL; do
            echo "${VAR}=\"${!VAR}\"" >> config
        done

        git add config

        # branches.ini
        for BRANCH in "${GIT_BRANCHES[@]}"; do
            if [[ "$BRANCH" != "$MR_FUSION_BRANCH" ]]; then
                echo "[$BRANCH]" >> branches.ini
                echo "parent=" >> branches.ini
                echo "" >> branches.ini
            fi
        done

        git add branches.ini

        # plugins
        mkdir plugins
        touch plugins/.keep
        git add plugins/.keep

        git commit -m 'Initial commit'

        if $DRY_RUN; then
            echo "Not pushing upstream - this is a dry run"
            exit 0
        fi

        git push origin "$MR_FUSION_BRANCH"
    )
}


# Helpful function to download and install a plugin from the Mr. Fusion
# repository into your repository.
install-plugin() {
    if ! in-array "$MR_FUSION_BRANCH" "${GIT_BRANCHES[@]}"; then
        echo "ERROR: Repository is not configured with a '$MR_FUSION_BRANCH' branch"
        exit 1
    fi

    (
        cd "$WORK_DIR"

        if [[ ! -d plugins ]]; then
            mkdir plugins
        fi

        cd plugins
        git checkout "$MR_FUSION_BRANCH"
        curl -s -f "https://raw.githubusercontent.com/tests-always-included/mr-fusion/master/plugins/$1" > $1 || exit 1
        git add "$1"
        git commit -m "Installing plugin $1"

        if $DRY_RUN; then
            echo "Not pushing upstream - this is a dry run"
            exit 0
        fi

        git push origin "$MR_FUSION_BRANCH"
        echo "Plugin downloaded and installed: $1"
    ) || {
        echo "ERROR: Unable to download plugin." >&2
        exit 1
    }
}


# Load the config files and plugins in your repository.
#
# The config is sourced, as are plugins.
#
# The branches.ini file is parsed and set into the environment.
#
# Runs the hook load-config.
load-config() {
    local OLD_PWD PLUGIN

    switch-to-branch "$MR_FUSION_BRANCH"
    OLD_PWD=$(pwd)

    cd "$WORK_DIR"

    if [[ -f config ]]; then
        echo "Loading config file from repository"
        . config
    fi

    if [[ -f branches.ini ]]; then
        echo "Parsing branches.ini"
        parse-ini INI_BRANCHES "$(cat branches.ini)"
    fi

    for PLUGIN in plugins/*; do
        if [[ -f "$PLUGIN" ]]; then
            echo "Loading plugin: $PLUGIN"
            . "$PLUGIN"
        fi
    done

    cd "$OLD_PWD"
    echo "Branches that are configured:"
    show-list "${INI_BRANCHES[@]}"
    hook-run-or-exit "load-config"
}


# Load all git branches from your repository.  This includes the magic
# "mr-fusion" branch.
#
# Branches are set to the GIT_BRANCHES array.
#
# Runs the hook git-branches.
load-git-branches() {
    local OLD_IFS

    echo "Finding git branches"
    OLD_IFS=$IFS
    IFS="\n"
    GIT_BRANCHES=()

    while read LINE; do
        LINE="$(trim "$LINE")"
        LINE="${LINE//origin\/}"

        if [[ ! -z "$LINE" ]]; then
            GIT_BRANCHES=("${GIT_BRANCHES[@]}" "$LINE")
        fi
    done <<< "$(
        cd "$WORK_DIR"
        git branch -r | grep -v ' -> '
    )"
    IFS=$OLD_IFS
    echo "Branches found:"
    show-list "${GIT_BRANCHES[@]}"
    hook-run-or-exit "git-branches"
}


# Perform the merge of all branches
#
# Reads the array of branch names from MERGE_LIST.  Processes each one.
# Populates MERGES_FAIL and MERGES_GOOD arrays.
#
# Runs the hooks merge-start, merge-fail, merge-good, merge-finiah.
merge-branches() {
    local BRANCH PARENT_VAR

    MERGES_FAIL=()
    MERGES_GOOD=()

    hook-run-or-exit merge-start

    for BRANCH in "${MERGE_LIST[@]}"; do
        PARENT_VAR="$(ini-var "$BRANCH" parent)"

        if [[ -z "${!PARENT_VAR}" ]]; then
            echo "Not merging $BRANCH - it has no parent"
        else
            if ! merge-two-branches "${!PARENT_VAR}" "$BRANCH"; then
                echo "ERROR: Merge failed"
                MERGES_FAIL=("${MERGES_FAIL[@]}" "$BRANCH")
                hook-run-or-exit merge-fail
            else
                echo "Merge successful"
                MERGES_GOOD=("${MERGES_GOOD[@]}" "$BRANCH")
                hook-run-or-exit merge-good
            fi

            if ! (
                cd "$WORK_DIR"
                git reset --hard "origin/$BRANCH"
            ); then
                echo "ERROR: Can not reset repository - can not continue"
                exit 1
            fi
        fi
    done

    hook-run-or-exit merge-finish
}


# Merges one parent into one child.
#
# Parameters:
#     $1: Parent branch.
#     $2: Child branch.
#
# Returns true (0) on success, false (1) otherwise.
#
# Runs the hooks merge-before, merge-validate.
merge-two-branches() {
    (
        cd "$WORK_DIR"

        switch-to-branch "$2" || exit 1
        hook-run-or-exit merge-before

        echo "Merging $1 into $2"

        if ! git merge "origin/$1" -m "$GIT_MERGE_MESSAGE"; then
            echo "ERROR: Unable to merge $1 into $2"
            exit 1
        fi

        hook-run-or-exit merge-validate

        if $DRY_RUN; then
            echo "Not pushing upstream - this is a dry run"
            exit 0
        fi

        git push
    ) || return 1
}


# Parses any INI file into the environment.  Variables are set like this:
#
#     PREFIX=(array of section names)
#     PREFIX__SECTION=true
#     PREFIX__SECTION__KEY=value
#
# The SECTION and KEY portions are hex encoded to ensure they are valid
# variable names.
#
# Parameters:
#     $1: Prefix for variables.
#     $2: INI file contents
parse-ini() {
    local KEY OLD_IFS PREFIX SECTION VALUE

    OLD_IFS=$IFS
    IFS="\n"
    SECTION=""
    PREFIX="$1"

    eval "${PREFIX}=()"

    while read LINE; do
        LINE=$(trim "$LINE")

        # Eliminate comments
        LINE=${LINE##\#*}
        LINE=${LINE##;*}

        if [[ "${LINE:0:1}" == '[' ]] && [[ "${LINE:${#LINE}-1}" == "]" ]]; then
            LINE=${LINE:1:${#LINE}-2}
            SECTION=$(trim "$LINE")
            eval "${PREFIX}__$(encode-string "$SECTION")=true"
            eval "${PREFIX}=(\"\${${PREFIX}[@]}\" \"\$SECTION\")"
        else
            IFS="="
            read KEY VALUE <<< "$LINE"
            IFS="\n"
            KEY=$(trim "$KEY")

            if [[ ! -z "$KEY" ]]; then
                VALUE=$(trim "$VALUE")
                eval "${PREFIX}__$(encode-string "$SECTION")__$(encode-string "$KEY")=\$VALUE"
            fi
        fi
    done <<< "$2"

    IFS=$OLD_IFS
}


# Writes elements of an array out to stdout.  Each element is on its own line
# as a bulleted list.
#
# Parameters:
#     $*: All array elements
show-list() {
    while [[ "$#" -gt 0 ]]; do
        echo "  * $1"
        shift
    done
}


# Show a summary of what happened.
#
# In case of failed merges, this is where the program terminates.
show-results() {
    if [[ "${#MERGES_FAIL[@]}" -gt 0 ]]; then
        echo "Failed merges detected"
        show-list "${MERGES_FAIL[@]}"

        exit 1
    fi
}


# Switches to a branch
#
# Parameters:
#     $1: Branch name
#
# Returns true (0) on success, false (1) otherwise.
#
# Runs the hook switch-branch.
switch-to-branch() {
    echo "Switching to branch $1"
    if ! (
        cd "$WORK_DIR"
        git checkout "$1"
    ); then
        echo "ERROR: Unable to check out branch $1" >&2

        exit 1
    fi
    hook-run-or-exit switch-branch
}


# Trims a string.  Writes the result to stdout.
#
# Parameters:
#     $1: The string to trim
trim() {
    local OLD STR

    STR=$1
    OLD=""

    while [[ "$STR" != "$OLD" ]]; do
        OLD=$STR
        STR=${STR# }
        STR=${STR#$'\n'}
        STR=${STR#$'\r'}
        STR=${STR#$'\t'}
        STR=${STR% }
        STR=${STR%$'\n'}
        STR=${STR%$'\r'}
        STR=${STR%$'\t'}
    done

    echo "$STR"
}

DO_INITIALIZE=false
DRY_RUN=false
GET_PLUGIN=
GIT_AUTHOR_NAME="Mr. Fusion"
GIT_AUTHOR_EMAIL="mr.fusion@example.com"
GIT_BRANCHES=()
GIT_COMMITTER_NAME="Mr. Fusion"
GIT_COMMITTER_EMAIL="mr.fusion@example.com"
GIT_MERGE_MESSAGE="Automatic merge by Mr. Fusion"
INI_BRANCHES=()
MERGE_LIST=()
MERGES_FAIL=()
MERGES_GOOD=()
MR_FUSION=${0##*/}
MR_FUSION_BRANCH=${MR_FUSION_BRANCH:-mr-fusion}
MR_FUSION_DIR=${0%%/*}
MR_FUSION_URL="https://github.com/tests-always-included/mr-fusion"
WORK_DIR=

while getopts ":hin:p:" ARG; do
    case "$ARG" in
        h)
            help-message

            exit 0
            ;;

        i)
            echo "Enabling initialization"
            DO_INITIALIZE=true
            ;;

        n)
            echo "Enabling DRY_RUN"
            DRY_RUN=true
            ;;

        p)
            echo "Will download and install plugin: $OPTARG"
            GET_PLUGIN=$OPTARG
            ;;

        :)
            echo "Option -$OPTARG requires a value."
            helpful-termination
            ;;

        '?')
            echo "Invalid option (-$OPTARG)."
            helpful-termination
            ;;
    esac
done

shift $((OPTIND-1))

if [[ -z "$1" ]]; then
    echo "No repository specified."
    helpful-termination
fi

trap cleanup SIGINT SIGTERM EXIT
clone-repository "$1"

if $DO_INITIALIZE; then
    load-git-branches
    initialize-repository
    exit
fi

if [[ ! -z "$GET_PLUGIN" ]]; then
    load-git-branches
    install-plugin "$GET_PLUGIN"
    exit
fi

load-config
configure-git
load-git-branches
build-merge-list
merge-branches
show-results
