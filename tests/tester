#!/bin/bash


# Remove the playgrounds if any exist
#
# Automatically executed via a trap
cleanup() {
    if [[ "${#PLAYGROUNDS}" -gt 0 ]]; then
        rm -rf "${PLAYGROUNDS[@]}"
    fi
}


# Creates a playground for running tests.
#
# I would have called this a sandbox, but the tests are not "boxed in" at all.
#
# Writes the playground path to stdout.  Adds the playground to the list of
# playgrounds for the cleanup function.
#
# On errors, this TERMINATES THE TESTS.
create-playground() {
    local DIR

    DIR=$(mktemp -d)

    if [[ -z "$DIR" ]] || [[ ! -d "$DIR" ]]; then
        echo "Unable to create playground for testing" >&2
        exit 1
    fi

    if ! (
        cd "$DIR"
        git init
        git config user.email "mr.fusion@example.com"
        git config user.name "Mr. Fusion"
        echo "Read this documentation" > README.md
        git add README.md
        git commit -m "Initial commit" README.md
    ) > /dev/null; then
        echo "Unable to initialize repository" >&2
        exit 1
    fi

    PLAYGROUNDS=("${PLAYGROUNDS[@]}" "$DIR")
    echo "$DIR"
}


# Test if a value is in an array.  Lifted directly from Mr. Fusion.
#
# Parameters:
#     $1: Needle (the value to find)
#     $2-$*: Haystack (the values to search)
# Returns true (0) if the value was found, false (1) otherwise.
in-array() {
    local CHECK NEEDLE

    NEEDLE="$1"
    shift

    for CHECK in "$@"; do
        [[ "$NEEDLE" == "$CHECK" ]] && return 0
    done

    return 1
}


# Installs a plugin into the playground's configuration.  Pulls the plugin
# From the local repository, not the online one.
#
# Parameters:
#     $1: Plugin filename
install-plugin() {
    git checkout mr-fusion 2>&1
    cp "$PROJECT_ROOT/plugins/$1" plugins/
    git add "plugins/$1" 2>&1
    git commit -m "Adding plugin $1" 2>&1
}


# Run a test case in a new playground
#
# On test case failure this sets FAILURES to true
#
# Parameters:
#     $1: Test case to run
playground-testcase() {
    local PLAYGROUND

    PLAYGROUND=$(create-playground)
    (
        cd "$PLAYGROUND"
        testcase "$@"
    ) || FAILURES=true
}


# Run Mr. Fusion from the local repository.
#
# If there is a playground that's open, this runs against that repository.
#
# Parameters:
#    $*:  All parameters are passed to mr-fusion
# Returns the same status code as mr-fusion.
run-mr-fusion() {
    local ARGS

    ARGS=("$@")

    if [[ ! -z "$PLAYGROUND" ]]; then
        ARGS=("${ARGS[@]}" "$PLAYGROUND")
    fi

    "$PROJECT_ROOT/mr-fusion" "${ARGS[@]}" 2>&1
}


# Runs a test case function
#
# Parameters:
#     $1: Name of function to run
#     $2: Description of test
# Returns true (0) on success, false (1) on error.
testcase() {
    echo -n "$2 ... "

    if $1 > /dev/null; then
        echo "pass"
    else
        echo "FAIL"
        FAILURES=true

        return 1
    fi
}


FAILURES=false
PLAYGROUNDS=()
PROJECT_ROOT=$(cd "${0%/*}/.." ; pwd)

# Execute the test file
. "$1"

if $FAILURES; then
    echo "Failures detected"
    exit 1
fi

echo "Test suite passed"
